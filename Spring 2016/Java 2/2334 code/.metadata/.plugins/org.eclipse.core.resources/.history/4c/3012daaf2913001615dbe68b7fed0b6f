import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;

/**
 * Project #4 CS 2334, Section 013 4/13/16
 * <p>
 * This class will satisfy the controller portion of the MVC design plan
 * </p>
 * 
 * @version 1.0
 *
 */
public class MediaController {

	/** This will be the model that this controller is connected to */
	MediaModel model;
	
	/** This will be the selection view controller listens to and interacts with */
	private SelectionView slView;
	
	/** This will be the AddView that this controller listens and interacts with */
	private AddView addView;
	
	/** This will be the EditView that this controller listens and interacts with */
	private EditView editView;

	/**
	 * The base constructor for this object
	 */
	public MediaController() {

	}

	// Create private class listeners for the radio buttons
	private class AddMediaListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			ArrayList<Media> allMedia = new ArrayList<Media>();
			allMedia.addAll(model.getMovieObjects());
			allMedia.addAll(model.getSeriesObjects());
			allMedia.addAll(model.getEpisodeObjects());
			slView.populateList(allMedia);
		}
	}

	private class AddMoviesListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			slView.populateList(model.getMovieObjects());
		}
	}

	private class AddSeriesListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			slView.populateList(model.getSeriesObjects());
		}
	}

	private class AddEpisodesListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			slView.populateList(model.getEpisodeObjects());
		}
	}

	private class AddMakersListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			slView.populateList(model.getMediaMakerObjects());

		}
	}

	private class AddActorsListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			slView.populateList(model.getActorObjects());

		}
	}

	private class AddDirectorsListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			slView.populateList(model.getDirectorObjects());

		}
	}

	private class AddProducersListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {			
				slView.populateList(model.getProducerObjects());
		}	
	}

	// Create private classes for the JMenu jmFile
	private class AddSaveListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			File chosenFile;
			JFileChooser fc = new JFileChooser();
			int returnValue = fc.showSaveDialog(fc);
			if (returnValue == JFileChooser.APPROVE_OPTION)
			{
				chosenFile = fc.getSelectedFile();
				try {
					model.saveTxt(chosenFile);
				} catch (IOException e1) {
					JOptionPane.showMessageDialog(null, "Error in saving to specified file, please try again");
				}
			}
						
			System.out.println("Save");
		}
	}

	private class AddLoadListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			File chosenFile;
			JFileChooser fc = new JFileChooser();
			int returnValue = fc.showOpenDialog(fc);
			if (returnValue == JFileChooser.APPROVE_OPTION)
			{
				chosenFile = fc.getSelectedFile();
				try {
					MediaModel newModel = MediaModel.readModel(chosenFile);
					setModel(newModel);
					
				} catch (ClassNotFoundException | IOException e1) {
					JOptionPane.showMessageDialog(null, "Error reading from binary file. Please try again or choose a different file.");
				}
			}
			
			System.out.println("Load");
			
		}
	}

	private class AddImportListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			Object[] options = {"Movies", "Series/Episode", "Actors", "Directors", "Producers"};
			String s = (String)JOptionPane.showInputDialog(null, "Choose the type of objects represented in the selected file",
					"File type", JOptionPane.QUESTION_MESSAGE, null, options, "Movies");
			File chosenFile;
			JFileChooser fc = new JFileChooser();
			int returnValue = fc.showOpenDialog(fc);
			if (returnValue == JFileChooser.APPROVE_OPTION)
			{
				chosenFile = fc.getSelectedFile();
				model.parseSelectedFile(chosenFile, s);
			}
			System.out.println("Import");
		}	
	}

	private class AddExportListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			File chosenFile;
			JFileChooser fc = new JFileChooser();
			int returnValue = fc.showOpenDialog(fc);
			if (returnValue == JFileChooser.APPROVE_OPTION);
			{
				chosenFile = fc.getSelectedFile();
				try {
					model.saveBinary(chosenFile);
				} catch (IOException e1) {
					System.out.println("error in saving binary");
				}
			}
			System.out.println("Export");
		}
	}

	// Create the private class listeners for the JMenu jmEdit
	private class AddAddListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			if (slView.jrbMovies.isSelected())
			{
				AddView movieAddView = new AddView(1, model.getMovieObjects());
				setAddView(movieAddView);
				
			}
			else if (slView.jrbSeries.isSelected())
			{
				AddView seriesAddView = new AddView(2, model.getSeriesObjects());
				setAddView(seriesAddView);
			}
			else if (slView.jrbEpisodes.isSelected())
			{
				AddView episodeAddView = new AddView(3, model.getEpisodeObjects());
				setAddView(episodeAddView);
			}
			else if (slView.jrbActors.isSelected())
			{
				AddView actorsAddView = new AddView(4, model.getMovieObjects(), model.getEpisodeObjects());
				setAddView(actorsAddView);
			}
			else if (slView.jrbDirectors.isSelected())
			{
				AddView directorsAddView = new AddView(4, model.getMovieObjects(), model.getEpisodeObjects());
				setAddView(directorsAddView);
			}
			else if (slView.jrbProducers.isSelected())
			{
				AddView producersAddView = new AddView(4, model.getMovieObjects(), model.getEpisodeObjects());
				setAddView(producersAddView);
			}
			else 
				JOptionPane.showMessageDialog(null, "Please specify the type of object being added \n by selecting the corresponding button.");
			
			System.out.println("Add");
		}		
	}

	
	private class AddAddButtonListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			boolean flag = false; //This will indicate whether the object already exists in the model
			//First if statement will deal with Movies being dealt with
			if (slView.jrbMovies.isSelected())
			{
				String title = addView.jtfTitle.getText();
				String releaseYear = addView.jtfReleaseYear.getText();
				String releaseFormat = addView.jtfReleaseFormat.getText();
				
				Movie movie = new Movie(title, releaseYear, releaseFormat);

				if (flag == false)
				{
					model.addObject(movie);
				}
			}
			//Second if statement deals with Series being dealt with
			else if (slView.jrbSeries.isSelected())
			{
				String title = addView.jtfTitle.getText();
				String startYear = addView.jtfStartYear.getText();
				String endYear = addView.jtfEndYear.getText();
				
				Series series = new Series(title, startYear, endYear);

				if (flag == false)
				{
					model.addObject(series);
				}
			}
			//Third if statement will deal with Episode objects
			else if (slView.jrbEpisodes.isSelected())
			{
				String episodeTitle = addView.jtfTitle.getText();
				String episodeNumber = addView.jtfEpisodeNumber.getText();
				String releaseYear = addView.jtfReleaseYear.getText();
				String seriesTitle = "";
				
				if (!addView.seriesDisplay.isSelectionEmpty())
				{
					Series selectedSeries = (Series)addView.seriesDisplay.getSelectedValue();
					seriesTitle = selectedSeries.getTitle();
				}
				
				Episode episode = new Episode(episodeTitle, seriesTitle, episodeNumber, releaseYear);

				if (flag == false)
				{
					model.addObject(episode);
				}
			}
			//Deals with adding Actor objects
			else if (slView.jrbActors.isSelected())
			{
				String name = addView.jtfName.getText();
				
				Actor actor = new Actor(name);

				if (!addView.movieDisplay.isSelectionEmpty())
				{
					ArrayList<Movie> selectedMovies = (ArrayList<Movie>)addView.movieDisplay.getSelectedValuesList();
					for (int i = 0; i < selectedMovies.size(); ++i)
					{
						actor.addMovieCredit(selectedMovies.get(i));
					}
				}
				if (!addView.episodeDisplay.isSelectionEmpty())
				{
					ArrayList<Episode> selectedEpisodes = (ArrayList<Episode>)addView.episodeDisplay.getSelectedValuesList();
					for (int i = 0; i < selectedEpisodes.size(); ++i)
					{
						actor.addEpisodeCredit(selectedEpisodes.get(i));
					}
				}
				
				boolean makerflag = false; //if MediaMaker doesn't exist yet
				for (MediaMaker mm1 : model.getMediaMakerObjects())
					if (mm1.getName().equals(name))
					{
						mm1.setActor(actor);
						makerflag = true;
					}
				
				if (makerflag == false)
				{
					MediaMaker mm = new MediaMaker(name);
					mm.setActor(actor);
					model.addObject(mm);
				}
				
				model.addObject(actor);
			}
			//Deals with adding Director objects
			else if (slView.jrbDirectors.isSelected())
			{
				String name = addView.jtfName.getText();
				
				Director director = new Director(name);
				
				if (!addView.movieDisplay.isSelectionEmpty())
				{
					ArrayList<Movie> selectedMovies = (ArrayList<Movie>)addView.movieDisplay.getSelectedValuesList();
					for (int i = 0; i < selectedMovies.size(); ++i)
					{
						director.addMovieCredit(selectedMovies.get(i));
					}
				}
				if (!addView.episodeDisplay.isSelectionEmpty())
				{
					ArrayList<Episode> selectedEpisodes = (ArrayList<Episode>)addView.episodeDisplay.getSelectedValuesList();
					for (int i = 0; i < selectedEpisodes.size(); ++i)
					{
						director.addEpisodeCredit(selectedEpisodes.get(i));
					}
				}
				
				boolean makerflag = false; //if MediaMaker doesn't exist yet
				for (MediaMaker mm1 : model.getMediaMakerObjects())
					if (mm1.getName().equals(name))
					{
						mm1.setDirector(director);
						makerflag = true;
					}
				
				if (makerflag == false)
				{
					MediaMaker mm = new MediaMaker(name);
					mm.setDirector(director);
					model.addObject(mm);
				}
						
				model.addObject(director);
			}
			//Deals with adding producer objects
			else if (slView.jrbProducers.isSelected())
			{
				String name = addView.jtfName.getText();
				
				Producer producer = new Producer(name);
				
				if (!addView.movieDisplay.isSelectionEmpty())
				{
					ArrayList<Movie> selectedMovies = (ArrayList<Movie>)addView.movieDisplay.getSelectedValuesList();
					for (int i = 0; i < selectedMovies.size(); ++i)
					{
						producer.addMovieCredit(selectedMovies.get(i));
					}
				}
				if (!addView.episodeDisplay.isSelectionEmpty())
				{
					ArrayList<Episode> selectedEpisodes = (ArrayList<Episode>)addView.episodeDisplay.getSelectedValuesList();
					for (int i = 0; i < selectedEpisodes.size(); ++i)
					{
						producer.addEpisodeCredit(selectedEpisodes.get(i));
					}
				}
				
				boolean makerflag = false; //if MediaMaker doesn't exist yet
				for (MediaMaker mm1 : model.getMediaMakerObjects())
					if (mm1.getName().equals(name))
					{
						mm1.setProducer(producer);
						makerflag = true;
					}
				
				if (makerflag == false)
				{
					MediaMaker mm = new MediaMaker(name);
					mm.setProducer(producer);
					model.addObject(mm);
				}
						
				model.addObject(producer);
			}
		}
	}

	private class AddEditListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) 
		{
			if (slView.jrbMovies.isSelected() || slView.jrbSeries.isSelected() || slView.jrbEpisodes.isSelected())
			{
				if (!slView.jlMedia.isSelectionEmpty())
				{
					if (slView.jlMedia.getSelectedValuesList().size() == 1)
					{
						if (slView.jrbMovies.isSelected()) 
						{
							EditView movieEditView = new EditView(1, slView.jlMedia.getSelectedValue());
							setEditView(movieEditView);
						}
						else if (slView.jrbSeries.isSelected()) 
						{
							EditView seriesEditView = new EditView(2, slView.jlMedia.getSelectedValue());
							setEditView(seriesEditView);
						}
						else if (slView.jrbEpisodes.isSelected()) 
						{
							EditView episodeEditView = new EditView(3, slView.jlMedia.getSelectedValue());
							setEditView(episodeEditView);
						}
					}
					else
						JOptionPane.showMessageDialog(null, "Please only pick 1 Media object to edit");
				}
				else
					JOptionPane.showMessageDialog(null, "No Media selected! \n Please select 1 Media object to edit");
			}
			else if (slView.jrbActors.isSelected() || slView.jrbDirectors.isSelected() || slView.jrbProducers.isSelected())
			{
				if (!slView.jlMediaMaker.isSelectionEmpty())
				{
					if (slView.jlMediaMaker.getSelectedValuesList().size() == 1)
					{
						if (slView.jrbActors.isSelected())
						{
							EditView actorEditView = new EditView(1, slView.jlMediaMaker.getSelectedValue());
							setEditView(actorEditView);
						}
						else if (slView.jrbDirectors.isSelected())
						{
							EditView directorEditView = new EditView(2, slView.jlMediaMaker.getSelectedValue());
							setEditView(directorEditView);
						}
						else if (slView.jrbProducers.isSelected())
						{
							EditView producerEditView = new EditView(3, slView.jlMediaMaker.getSelectedValue());
							setEditView(producerEditView);
						}
					}
					else
						JOptionPane.showMessageDialog(null, "Please only select 1 MediaMaker object to edit");
				}
				else
					JOptionPane.showMessageDialog(null, "No MediaMaker seleceted! \n Please select 1 MediaMaker object to edit");
			}
			
			else if (slView.jrbMedia.isSelected() || slView.jrbMakers.isSelected())
			{
				JOptionPane.showMessageDialog(null, "Please choose the button of the specific type of object being edited");
			}
			System.out.println("Edit");
		}
	}
	
	private class AddEditButtonListener implements ActionListener {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			if (slView.jrbMovies.isSelected())
			{
				String title = editView.jtfTitle.getText();
				String releaseYear = editView.jtfReleaseYear.getText();
				String venue = editView.jtfReleaseFormat.getText();
				
				Movie movie = new Movie(title, releaseYear, venue);
				
				model.editObject(movie, (Movie)slView.jlMedia.getSelectedValue());
			}
			else if (slView.jrbSeries.isSelected())
			{
				String title = editView.jtfTitle.getText();
				String startYear = editView.jtfReleaseYear.getText();
				String endYear = editView.jtfEndYear.getText();
				
				Series series = new Series(title, startYear, endYear);
				
				model.editObject(series, (Series)slView.jlMedia.getSelectedValue());
			}
			else if (slView.jrbEpisodes.isSelected())
			{
				String episodeTitle = editView.jtfTitle.getText();
				String episodeNumber = editView.jtfEpisodeNumber.getText();
				String releaseYear = editView.jtfReleaseYear.getText();
				String seriesTitle = editView.jtfSeriesTitle.getText();
				
				Episode episode = new Episode(episodeTitle, releaseYear, seriesTitle, episodeNumber);
				
				model.editObject(episode, (Episode)slView.jlMedia.getSelectedValue());
			}
			System.out.println("Edit button pushed");		
		}
	}
	
	private class AddEditMMButtonListener implements ActionListener {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			if (slView.jrbActors.isSelected())
			{
				String name = editView.jtfName.getText();
				ArrayList<Media> selectedMedia = new ArrayList<Media>();
				ArrayList<Movie> presentMovies = slView.jlMediaMaker.getSelectedValue().getMovieCredits();
				ArrayList<Episode> presentEpisodes = slView.jlMediaMaker.getSelectedValue().getEpisodeCredits();
				if (!editView.displayCredits.isSelectionEmpty())
				{
					selectedMedia = (ArrayList<Media>)editView.displayCredits.getSelectedValuesList();
				}
				
				presentMovies.removeAll(selectedMedia);
				presentEpisodes.removeAll(selectedMedia);
				
				Actor newActor = new Actor(name);
				for (int i = 0; i < presentMovies.size(); ++i)
					newActor.addMovieCredit(presentMovies.get(i));
				for (int i = 0; i < presentEpisodes.size(); ++i)
					newActor.addEpisodeCredit(presentEpisodes.get(i));
				
				model.editObject(newActor, slView.jlMediaMaker.getSelectedValue());
			}
			else if (slView.jrbDirectors.isSelected())
			{
				String name = editView.jtfName.getText();
				ArrayList<Media> selectedMedia = new ArrayList<Media>();
				ArrayList<Movie> presentMovies = slView.jlMediaMaker.getSelectedValue().getMovieCredits();
				ArrayList<Episode> presentEpisodes = slView.jlMediaMaker.getSelectedValue().getEpisodeCredits();
				if (!editView.displayCredits.isSelectionEmpty())
				{
					selectedMedia = (ArrayList<Media>)editView.displayCredits.getSelectedValuesList();
				}
				
				presentMovies.removeAll(selectedMedia);
				presentEpisodes.removeAll(selectedMedia);
				
				Director newDirector = new Director(name);
				for (int i = 0; i < presentMovies.size(); ++i)
					newDirector.addMovieCredit(presentMovies.get(i));
				for (int i = 0; i < presentEpisodes.size(); ++i)
					newDirector.addEpisodeCredit(presentEpisodes.get(i));
				
				model.editObject(newDirector, slView.jlMediaMaker.getSelectedValue());
			}
			else if (slView.jrbProducers.isSelected())
			{
				String name = editView.jtfName.getText();
				ArrayList<Media> selectedMedia = new ArrayList<Media>();
				ArrayList<Movie> presentMovies = slView.jlMediaMaker.getSelectedValue().getMovieCredits();
				ArrayList<Episode> presentEpisodes = slView.jlMediaMaker.getSelectedValue().getEpisodeCredits();
				if (!editView.displayCredits.isSelectionEmpty())
				{
					selectedMedia = (ArrayList<Media>)editView.displayCredits.getSelectedValuesList();
				}
				
				presentMovies.removeAll(selectedMedia);
				presentEpisodes.removeAll(selectedMedia);
				
				Producer newProducer = new Producer(name);
				for (int i = 0; i < presentMovies.size(); ++i)
					newProducer.addMovieCredit(presentMovies.get(i));
				for (int i = 0; i < presentEpisodes.size(); ++i)
					newProducer.addEpisodeCredit(presentEpisodes.get(i));
				
				model.editObject(newProducer, slView.jlMediaMaker.getSelectedValue());
			}
			System.out.println("Edit button pushed");		
		}
	}

	private class AddDeleteListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			System.out.println("Delete"); //Tests if button click recognized.
			int confirmation = JOptionPane.showConfirmDialog(null, "Are you sure you wish to delete the object selected?", 
					"Delete Confirmation", JOptionPane.YES_NO_OPTION);
			//confirmation to delete
			if (confirmation == JOptionPane.YES_OPTION)
			{
				if (slView.jrbMedia.isSelected()) {
					for (Media a : slView.jlMedia.getSelectedValuesList()) {
						model.deleteObject(a);
					}
				}
				else if (slView.jrbMovies.isSelected()){
					for (Media m : slView.jlMedia.getSelectedValuesList()) {
						model.deleteObject((Movie)m);
					}
				}
				else if (slView.jrbSeries.isSelected()){
					for (Media s : slView.jlMedia.getSelectedValuesList()) {
						model.deleteObject((Series)s);
					}
				}
				else if (slView.jrbEpisodes.isSelected()) {
					for (Media ep : slView.jlMedia.getSelectedValuesList()) {
						model.deleteObject((Episode)ep);
					}
				}
	
				if (slView.jrbMakers.isSelected()) {
					for (MediaMaker a : slView.jlMediaMaker.getSelectedValuesList()) {
						model.deleteObject(a);
					}
				}
				else if (slView.jrbActors.isSelected()) {
					for (MediaMaker ac : slView.jlMediaMaker.getSelectedValuesList()) {
						model.deleteObject((Actor)ac);
					}
				}
				else if (slView.jrbDirectors.isSelected()) {
					for (MediaMaker di : slView.jlMediaMaker.getSelectedValuesList()) {
						model.deleteObject((Director)di);
					}
				}
				else if (slView.jrbProducers.isSelected()) {
					for (MediaMaker pr : slView.jlMediaMaker.getSelectedValuesList()) {
						model.deleteObject((Producer)pr);
					}
				}
			}
			//Do not delete
			else
				JOptionPane.showMessageDialog(null, "Object not deleted");
		}
	}

	private class AddClearListener implements ActionListener {

		public String getSelectedButtonText() {
			String result = "";
			for (Component a : slView.buttonList.getComponents()) {

				if (((JRadioButton) a).isSelected()) {
					result = ((JRadioButton) a).getText();
				}
			}
			return result;
		}
		
		@Override
		public void actionPerformed(ActionEvent e) {
			System.out.println("Clear");
			int confirmation = JOptionPane.showConfirmDialog(null, "Are you sure you wish to clear the selected field?", 
					"Clear Confirmation", JOptionPane.YES_NO_OPTION);
			if (confirmation == JOptionPane.YES_OPTION)
			{
				model.clear(getSelectedButtonText());
				System.out.println(model.getMediaObjects());
			}
			else
				JOptionPane.showMessageDialog(null, "Selected field not cleared");
		}
	}

	private class AddClearAllListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			System.out.println("Clear All");
			int confirmation = JOptionPane.showConfirmDialog(null, "Are you sure you wish to clear all fields?", 
					"Clear All Confirmation", JOptionPane.YES_NO_OPTION);
			if (confirmation == JOptionPane.YES_OPTION)
			{
				model.clearAll();
			}
			else
				JOptionPane.showMessageDialog(null, "Nothing cleared");
		}
	}

	// Create private class listeners for the JMenu jmDisplay
	private class AddPieChartListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			System.out.println("PieChart");
			if (slView.jrbMedia.isSelected() || slView.jrbMovies.isSelected() || slView.jrbEpisodes.isSelected() || slView.jrbSeries.isSelected())
				JOptionPane.showMessageDialog(null, "Invalid field selected! \n "
						+ "Please select a valid field from the left \n (Makers, Actors, Directors, Producers)");
			else if (slView.jlMediaMaker.getSelectedValue() == null)
				JOptionPane.showMessageDialog(null, "No MediaMaker selected! \n Please select a MediaMaker from the list");
			else
			{
				int numActMov = 0;
				int numActEp = 0;
				int numDirMov = 0;
				int numDirEp = 0;
				int numProMov = 0;
				int numProEp = 0;
								
				ArrayList<MediaMaker> selectedMediaMakers = (ArrayList<MediaMaker>)slView.jlMediaMaker.getSelectedValuesList();
				
				//for if all MediaMakers are selected
				if (slView.jrbMakers.isSelected())
				{
					for (MediaMaker mm : selectedMediaMakers)
					{
						if (mm.hasActor())
						{
							ArrayList<MediaMaker> mmActing = model.getActorObjects();
							for (int i = 0; i < mmActing.size(); ++i)
							{
								if (mmActing.get(i).getName().equals(mm.getName()))
								{
									numActMov = mmActing.get(i).getMovieCredits().size();
									numActEp = mmActing.get(i).getEpisodeCredits().size();
								}
							}
						}
						if (mm.hasDirector())
						{
							ArrayList<MediaMaker> mmDirecting = model.getDirectorObjects();
							for (int i = 0; i < mmDirecting.size(); ++i)
							{
								if (mmDirecting.get(i).getName().equals(mm.getName()))
								{
									numDirMov = mmDirecting.get(i).getMovieCredits().size();
									numDirEp = mmDirecting.get(i).getEpisodeCredits().size();
								}
							}
						}
						if (mm.hasProducer())
						{
							ArrayList<MediaMaker> mmProducing = model.getProducerObjects();
							for (int i = 0; i < mmProducing.size(); ++i)
							{
								if (mmProducing.get(i).getName().equals(mm.getName()))
								{
									numProMov = mmProducing.get(i).getMovieCredits().size();
									numProEp = mmProducing.get(i).getEpisodeCredits().size();
								}
							}
						}
						
						PieChart chart = new PieChart("MediaMaker Pie Chart of Credits", mm.getName() + "'s Total Credits", 
								numActMov, numActEp, numDirMov, numDirEp, numProMov, numProEp);
						chart.pack();
						chart.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
						chart.setVisible(true);
					}
				}
				else if (slView.jrbActors.isSelected())
				{
					for (MediaMaker mm : selectedMediaMakers)
					{
						numActMov = mm.getMovieCredits().size();
						numActEp = mm.getEpisodeCredits().size();
						
						PieChart chart = new PieChart("Actor Pie Chart of Credits", mm.getName() + "'s Acting Credits", 
								numActMov, numActEp);
						chart.pack();
						chart.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
						chart.setVisible(true);
					}
				}
				else if (slView.jrbDirectors.isSelected())
				{
					for (MediaMaker mm : selectedMediaMakers)
					{
						numDirMov = mm.getMovieCredits().size();
						numDirEp = mm.getEpisodeCredits().size();
						
						PieChart chart = new PieChart("Director Pie Chart of Credits", mm.getName() + "'s Directing Credits",
								numDirMov, numDirEp);
						chart.pack();
						chart.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
						chart.setVisible(true);
					}
				}
				else if (slView.jrbProducers.isSelected())
				{
					for (MediaMaker mm : selectedMediaMakers)
					{
						numProMov = mm.getMovieCredits().size();
						numProEp = mm.getEpisodeCredits().size();
						
						PieChart chart = new PieChart("Producer Pie Chart of Credits", mm.getName() + "'s Producing Credits",
								numProMov, numProEp);
						chart.pack();
						chart.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
						chart.setVisible(true);
					}
				}
			}
		}
	}

	private class AddHistogramListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			System.out.println("Histogram");
			 for(MediaMaker a: slView.jlMediaMaker.getSelectedValuesList()){
			 	JFrame frame = new JFrame();
			 frame.setSize(900,600);
			 frame.add(new Histogram(a));
			 frame.setVisible(true);
			 }
		}
	}
	
	private class AddDoSListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			System.out.println("DoS");
			if (slView.jrbMedia.isSelected() || slView.jrbMovies.isSelected() || slView.jrbSeries.isSelected() || slView.jrbEpisodes.isSelected())
				JOptionPane.showMessageDialog(null, "Invalid Field selected! \n Please choose a valid field from the left "
						+ "\n (Makers, Actors, Directors, Producers");
			else if (slView.jrbMakers.isSelected() || slView.jrbActors.isSelected() || slView.jrbDirectors.isSelected() || slView.jrbProducers.isSelected())
			{
				if (!slView.jlMediaMaker.isSelectionEmpty())
				{
					ArrayList<MediaMaker> selectedMakers = (ArrayList<MediaMaker>)slView.jlMediaMaker.getSelectedValuesList();
					if (selectedMakers.size() == 2)
					{
						MediaMaker mm1 = selectedMakers.get(0);
						MediaMaker mm2 = selectedMakers.get(1);
						ArrayList<MediaMaker> foundMatches = new ArrayList<MediaMaker>();
						ArrayList<Media> foundMedia = new ArrayList<Media>();
						foundMatches.add(mm1);
						foundMedia.addAll(model.getMediaObjects());
						//for (int i = 1; i < 6; ++i)
						//	model.degreesOfSeperation(mm1, mm2, i);
						DoSListView view = new DoSListView(mm1, mm2, model, foundMatches, foundMedia);
					}
					else
						JOptionPane.showMessageDialog(null, "Please select 2 MediaMakers");
				}
				else 
					JOptionPane.showMessageDialog(null, "No MediaMakers slected! Please select 2 makers");			
			}
			else
				JOptionPane.showMessageDialog(null, "Please select a valid field \n (Makers, Actors, Directors, Producers");
		}
	}

	/**
	 * This method will set the MediaModel for this controller
	 * 
	 * @param newModel
	 *            The MediaModel to be assigned to this controller
	 */
	public void setModel(MediaModel newModel) {
		if (newModel != null)
			this.model = newModel;
	}

	/**
	 * This method will return the MediaModel associated with this controller
	 * 
	 * @return The MediaModel associated with this controller
	 */
	public MediaModel getModel() {
		return this.model;
	}

	/**
	 * This method will set the SelectionView for this controller, as well as
	 * register all listeners associated with that SelectionView
	 * 
	 * @param view
	 *            The SelectionView to be assigned to the controller
	 */
	public void setSelectionView(SelectionView view) {
		this.slView = view;

		// Register listeners for the radio buttons in the SelectionView slView
		slView.addMediaButtonListener(new AddMediaListener());
		slView.addMoviesButtonListener(new AddMoviesListener());
		slView.addSeriesButtonListener(new AddSeriesListener());
		slView.addEpisodeButtonListener(new AddEpisodesListener());
		slView.addMakersButtonListener(new AddMakersListener());
		slView.addActorsButtonListener(new AddActorsListener());
		slView.addDirectorsButtonListener(new AddDirectorsListener());
		slView.addProducersButtonListener(new AddProducersListener());

		// Register listeners for the JMenu jmFile in the SelectionView slView
		slView.addSaveButtonListener(new AddSaveListener());
		slView.addLoadButtonListener(new AddLoadListener());
		slView.addImportButtonListener(new AddImportListener());
		slView.addExportButtonListener(new AddExportListener());

		// Register listeners for the JMenu jmEdit in the SelectionView slView
		slView.addAddButtonListener(new AddAddListener());
		slView.addEditButtonListener(new AddEditListener());
		slView.addDeleteButtonListener(new AddDeleteListener());
		slView.addClearButtonListener(new AddClearListener());
		slView.addClearAllButtonListener(new AddClearAllListener());

		// Register listeners for the JMenu jmDisplay in the SelectionView
		// slView
		slView.addPieChartButtonListener(new AddPieChartListener());
		slView.addHistogramButtonListener(new AddHistogramListener());
		slView.addDoSButtonListener(new AddDoSListener());
		
		model.addActionListener(slView);
	}
	
	/**
	 * Sets the AddView for this controller 
	 * 
	 * @param view		AddView to be set
	 */
	public void setAddView(AddView view) {
		this.addView = view;
		
		addView.addAddButtonListener(new AddAddButtonListener());
		
		model.addActionListener(view);
	}
	
	/**
	 * Sets the EditView for this Controller
	 * 
	 * @param view		EditView to be set
	 */
	public void setEditView(EditView view) {
		this.editView = view;
		
		editView.addEditButtonListener(new AddEditButtonListener());
		editView.addEditMMButtonListener(new AddEditMMButtonListener());
	}

	/**
	 * This method will return the SelectionView associated with this controller
	 * 
	 * @return The SelectionView associated with this controller
	 */
	public SelectionView getSelectionView() {
		return this.slView;
	}

}